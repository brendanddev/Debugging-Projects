import java.util.ArrayList;
import java.util.Arrays;

/**
 * @author Brendan Dileo
 * Date: October 20, 2024.
 * The intial code was generated by CoPilot, so I can debug, and re-write the code.
 * This class consists of refactored and debugged code that now follows best practises.
 * It is a version of the 'BuggyFunctionsBefore' class, however this class implements the same logic, methods, and code,
 * but follows best practises in terms of code modularization, debugging, error handling, and more.
 */
public class BuggyFunctionsAfter {

    /* Changes Made:
     *
     * Main Method:
     * Reformatted and refactored code, aswell as added JavaDoc documentation.
     * Added a second list to test the result of the methods.
     * Removed regular for loops and replaced with foreach loops.
     * Line 15 - 20: Used 'asList' method instead of repeated 'add' methods to avoid code duplication.
     * Line 31: Replaced unnecessary method call with 'add' method from the ArrayList class.
     * Line 32 - 33: Replaced unnecessary method call with the 'remove' method from the ArrayList class as the indexes
     *  were specified in the initial calls.
     * Line 29: Changed method call to reflect new method name, passed a valid integer instead of a string.
     * Wrapped main method in a try-catch block to handle any exceptions that may occur.
     *
     * LongestName Method:
     * Reformatted the method, and added JavaDoc documentation.
     * Line 37: Removed the initializing the longest variable to null. Re-declared it on Line 73 and to an empty string.
     * Line 37: Added a check for a null or empty list, an exception is thrown if the list is empty or null.
     * Line 39: Added a check for a null list element, an exception is thrown if that is the case.
     *
     * PrintNumbersAndSum Method:
     * Refactored the method, and added JavaDoc documentation.
     * Changed the method name to reflect its purpose.
     * Line 47: Added a check for negative numbers and threw and exception if it was.
     * Line 48 - 55: Removed unnecessary second loop, and calculate sum in the first loop. I also changed the loop to start
     *  at 0 instead of 1.
     *
     * Removed 'addNames' & 'removeNames' method as methods with the same functionality are included in the ArrayList class.
     */

    /**
     * Main method for execution.
     * @param args unused.
     */
    public static void main(String[] args) {

        try {
            // Uses 'asList' static method to turn array into array list.
            ArrayList<String> namesOne = new ArrayList<>(Arrays.asList("Alice", "Bob", "Charlie", null, "David"));
            ArrayList<String> namesTwo = new ArrayList<>(Arrays.asList("Jakobi", "Kobe", "Dylan", "Ramatanchdran", "Jake", "Cooper"));

            System.out.println("Names in List One: ");
            for (String name : namesOne) { // Foreach loop instead of for loop.
                if (name != null) { // Only prints valid names.
                    System.out.println(name);
                }
            }
            System.out.println("\nLength of the longest name: " + longestName(namesOne)); // Throws an exception as expected.

            System.out.println("Names in List Two:");
            for (String name : namesTwo) { // Foreach loop instead of for loop.
                if (name != null) { // Only prints valid names.
                    System.out.println(name);
                }
            }
            System.out.println("Length of the longest name: " + longestName(namesTwo)); // Throws an exception as expected.

            printNumbersAndSum(10);

            namesOne.add("Eve");
            namesOne.remove(3);
            namesOne.remove(5); // Will throw an exception for the current list.

        } catch (IllegalArgumentException ex) {
            System.out.println("Exception: IllegalArgumentException - " + ex.getMessage());
        } catch (NullPointerException ex) {
            System.out.println("Exception: NullPointerException - " + ex.getMessage());
        } catch (IndexOutOfBoundsException ex) {
            System.out.println("Exception: IndexOutOfBoundsException - " + ex.getMessage());
        } catch (Exception e) {
            System.out.println("Exception: Unexpected Exception - " + e.toString());
        }
    }

    /**
     * This method is responsible for determining which name in a list of names is the longest.
     * @param names ArrayList of strings representing each name.
     * @return integer representing the length of the longest name.
     * @throws IllegalArgumentException if the list is null or empty.
     * @throws NullPointerException if one of the list elements is null.
     */
    public static int longestName(ArrayList<String> names) {

        if (names == null || names.isEmpty()) { // Check for null or empty list.
            throw new IllegalArgumentException("A valid list of names must be entered!");
        }
        String longest = ""; // Empty string instead of null value.
        for (String name : names) {
            if (name == null) { // Check for null list element.
                throw new NullPointerException("Error: Cannot accept a null value!");
            }
            if (name.length() > longest.length()) {
                longest = name;
            }
        }
        return longest.length();
    }

    /**
     * This method is used to calculate and print the sum of the numbers up to an integer 'n', aswell as print each of
     * the numbers up to 'n'.
     * @param n an integer representing the upper limit for the numbers to be printed and summed.
     * @throws IllegalArgumentException if the number 'n' is less than 0.
     */
    public static void printNumbersAndSum(int n) {

        if (n < 0) { // Checks that 'n' is positive.
            throw new IllegalArgumentException("Error: Must be a positive integer!");
        }
        int sum = 0;
        for (int i = 0; i <= n; i++) { // Removed second loop, implemented same functionality within the single loop.
            sum += i;
            System.out.println(i);
        }
        System.out.println("Sum: " + sum);
    }

    /*
     * The 'addNames' method and 'removeNames' method were both removed.
     * Neither of these methods were necessary given their functionality, considering the ArrayList class itself provides
     * methods to add and remove elements into a list.
     */

}
